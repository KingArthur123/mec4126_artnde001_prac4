#define STM32F051

#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include "stm32f0xx.h"
#include <lcd_stm32f0.h>


void init_LEDs(void);
void display_on_LEDs(uint8_t count);
void init_switches();
int main(void);
void init_external_interrupts(void);
void EXTI2_3_IRQHandler(void);



void display_on_LCD(uint8_t count) {
// Clear GPIOB pins
lcd_command(CLEAR);
/*GPIOB->ODR &= ~(GPIO_ODR_0
| GPIO_ODR_1
| GPIO_ODR_2
| GPIO_ODR_3
| GPIO_ODR_4
| GPIO_ODR_5
| GPIO_ODR_6
| GPIO_ODR_7);*/
// Convert count to a string
char str[4]; //
sprintf(str, "%d", count);

// Clear the LCD and write the string to the LCD



lcd_putstring(str);
}




int main(void) {

uint8_t count = 0; // number to display on LEDs and LCD
init_LEDs();
init_LCD();
init_switches();
display_on_LCD(count); // Display initial value of count on LCD
init_external_interrupts();




while (1)
{

EXTI2_3_IRQHandler();
display_on_LEDs(count);
display_on_LCD(count) ;
delay(100000);




}

return count;
}

//Write a function called "init_LEDs" to setup GPIOB to use the LEDS as outputs

void init_LEDs(void) {

RCC->AHBENR |= RCC_AHBENR_GPIOBEN; // Enable GPIOB clock

// Set PB0, PB1, PB2, PB3 ,PB4, PB5, PB6,PB7as output pins
GPIOB->MODER |= GPIO_MODER_MODER0_0
| GPIO_MODER_MODER1_0
| GPIO_MODER_MODER2_0
| GPIO_MODER_MODER3_0
| GPIO_MODER_MODER4_0
| GPIO_MODER_MODER5_0
| GPIO_MODER_MODER6_0
| GPIO_MODER_MODER7_0;



// Set no pull-up or pull-down resistors
// to ensure that GPIO has a defined voltage level
//clears it, resets
GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0
| GPIO_PUPDR_PUPDR1
| GPIO_PUPDR_PUPDR2
| GPIO_PUPDR_PUPDR3
| GPIO_PUPDR_PUPDR4
| GPIO_PUPDR_PUPDR5
| GPIO_PUPDR_PUPDR6
| GPIO_PUPDR_PUPDR7);
}



/*Write and include a function in your main.c file called "display_on_LEDs" which takes an 8 bit integer (always positive in value)
as an argument and displays its binary representation on the LEDS.*/

void display_on_LEDs(uint8_t count) {
// Clear GPIOB pins
GPIOB->ODR &= ~(GPIO_ODR_0
| GPIO_ODR_1
| GPIO_ODR_2
| GPIO_ODR_3
| GPIO_ODR_4
| GPIO_ODR_5
| GPIO_ODR_6
| GPIO_ODR_7);

// Set GPIOB pins according to the binary representation of count
for (uint8_t i = 0; i < 8; i++) {
uint8_t bit_value = (count >> i) & 1; // Get i-th bit of count
GPIOB->ODR |= (bit_value << i); // Set i-th GPIOB pin to i-th bit of count
}
}



/*Write a function called “init_switches” which allows the use of SW1 and SW2 on the microcontroller.*/
void init_switches() {
// Enable clock for GPIOA
RCC->AHBENR |= RCC_AHBENR_GPIOAEN;

// Configure PA1 and PA2 as input pins
/* GPIOA->MODER &= ~(GPIO_MODER_MODER1_0)
| GPIO_MODER_MODER2_0);*/
GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR1_0
| GPIO_PUPDR_PUPDR2_0);
GPIOA->PUPDR |= GPIO_PUPDR_PUPDR1_0
|GPIO_PUPDR_PUPDR2_0;
}



void init_external_interrupts(void)
{
// Enable clock for System Configuration (SYSCFG)
RCC->APB2ENR |= RCC_APB2ENR_SYSCFGCOMPEN;

// Route PA0 and PA1 to EXTI1 and EXTI2, respectively
SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA; // route PA to EXTI0
SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PA; // route PA to EXTI0

// Unmask interrupts on PA0 and PA1, and configure falling-edge trigger
EXTI->IMR |= EXTI_IMR_MR0 | EXTI_IMR_MR1; // unmask the interrupt on PA0 and PA1
EXTI->FTSR |= EXTI_FTSR_TR0 | EXTI_FTSR_TR1; // falling-edge trigger


// Enable NVIC for EXTI3
NVIC_EnableIRQ(EXTI2_3_IRQn);

}

void EXTI2_3_IRQHandler(void)
{
static int8_t SW3_count = 0; // Make the variable static to retain its value between interrupts

// Increment the count variable
SW3_count ++;

// If the count is odd, clear the LCD screen and turn off LEDs
if ((SW3_count % 2) != 0 )
{
lcd_command(CLEAR); // Clear the LCD screen
display_on_LEDs(0); // Turn off all LEDs directly without creating a variable
}

// Wait for a specified amount of time
delay(10000);

// Clear the interrupt pending bit for external interrupt line 3
EXTI->PR |= EXTI_PR_PR3;
}

